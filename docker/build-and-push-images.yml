# Build Sitecoredemo Docker images
trigger:
  branches:
    include:
    - develop
schedules:
  - cron: "0 17 * * 0"
    displayName: Weekly Sunday build
    branches:
      include:
      - master
      - develop
    always: true
resources:
- repo: self
  clean: true

variables:
  GitVersion.SemVer: ''
  SITECORE_VERSION: '10.0.1'
  GitVersion.PreReleaseLabel: ''
  tag: '$(GitVersion.SemVer)'
  additionalImageTags: ''

stages:
- stage: Docker_Windows
  displayName: "Build Windows Images"
  jobs:
  - job: Build_Headless
    timeoutInMinutes: 120
    strategy:
      matrix:
        windows2004:
          poolName: 'docker-2004-agents'
          osVersion: '2004'
          nanoserverVersion: '2004'
        ltsc2019:
          poolName: 'docker-ltsc2019-agents'
          osVersion: 'ltsc2019'
          nanoserverVersion: '1809'
    displayName: 'Build Windows Docker Images'
    pool:
      name: $(poolName)
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.x'
        installationPath: 'c:/program files/dotnet'
        performMultiLevelLookup: true
    - task: PowerShell@2
      displayName: "Prepare .env file"
      inputs:
        targetType: 'inline'
        script: |
          ./init-ci.ps1 -DemoTeamRegistry $(REGISTRY)
    - template: version.yml
    - task: DockerCompose@0
      displayName: "Docker Compose Build"
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: '$(azure.subscription)'
        azureContainerRegistry: '$(container.registry)'
        dockerComposeFile: 'docker-compose.yml'
        additionalDockerComposeFiles: 'docker-compose.override.yml'
        dockerComposeFileArgs: |
          ISOLATION=process
          DEMO_VERSION=$(tag)
          REGISTRY=$(REGISTRY)
          WINDOWSSERVERCORE_VERSION=$(osVersion)
          NANOSERVER_VERSION=$(nanoserverVersion)
          SITECORE_VERSION=$(SITECORE_VERSION)
          SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
          SITECORE_LICENSE=$(SITECORE_LICENSE)
          TELERIK_ENCRYPTION_KEY=$(TELERIK_ENCRYPTION_KEY)
          INTERNAL_NUGET_SOURCE=$(INTERNAL_NUGET_SOURCE)
          SYSTEM_ACCESSTOKEN=$(INTERNAL_NUGET_TOKEN)
          SITECORE_ID_CERTIFICATE=$(sitecore.id.certificate)
        qualifyImageNames: false
        action: 'Build services'
        additionalImageTags: '$(SITECORE_VERSION)-$(osVersion)-$(additionalImageTags)'
        arguments: '--pull --parallel $(no.cache)'
        currentWorkingDirectory: '$(Build.SourcesDirectory)'
    - task: DockerCompose@0
      displayName: "Push Images"
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azure.subscription)
        azureContainerRegistry: $(container.registry)
        dockerComposeFile: 'docker-compose.yml'
        additionalDockerComposeFiles: 'docker-compose.override.yml'
        dockerComposeFileArgs: |
          REGISTRY=$(REGISTRY)
          DEMO_VERSION=$(tag)
          WINDOWSSERVERCORE_VERSION=$(osVersion)
          NANOSERVER_VERSION=$(nanoserverVersion)
          SITECORE_VERSION=$(SITECORE_VERSION)
          SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
          SITECORE_LICENSE=$(SITECORE_LICENSE)
          TELERIK_ENCRYPTION_KEY=$(TELERIK_ENCRYPTION_KEY)
          SITECORE_ID_CERTIFICATE=$(sitecore.id.certificate)
        action: 'Push services'
        additionalImageTags: '$(SITECORE_VERSION)-$(osVersion)-$(additionalImageTags)'
        currentWorkingDirectory: '$(Build.SourcesDirectory)'
- stage: Docker_Linux
  dependsOn: []
  displayName: 'Build Linux Images'
  jobs:
  - job: Build_Dacpacs
    pool:
      name: docker-ltsc2019-agents
    displayName: "Publish Dacpacs"
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.x'
        installationPath: 'c:/program files/dotnet'
        performMultiLevelLookup: true
    - template: version.yml
    - task: DockerCompose@0
      displayName: "Docker Compose Build Dacpacs"
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: '$(azure.subscription)'
        azureContainerRegistry: '$(container.registry)'
        dockerComposeFile: 'docker/docker-compose-dacpac.yml'
        dockerComposeFileArgs: |
          INTERNAL_NUGET_SOURCE=$(INTERNAL_NUGET_SOURCE)
          SYSTEM_ACCESSTOKEN=$(INTERNAL_NUGET_TOKEN)
          DEMO_VERSION=$(tag)
          SITECORE_VERSION=$(SITECORE_VERSION)
        action: 'Build services'
        qualifyImageNames: false
        arguments: '--pull --parallel $(no.cache)'
    - task: PowerShell@2
      displayName: "Copy output from container to Artifacts"
      inputs:
        targetType: 'inline'
        script: |
          docker container create --name dacpac$(tag) dacpac:$(tag)
          docker container cp dacpac$(tag):/output $(Build.ArtifactStagingDirectory)/dacpacs
          docker container rm -f dacpac$(tag)
    - task: PublishPipelineArtifact@1
      displayName: "Publish Dacpac Artifacts"
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/dacpacs'
        artifact: 'dacpac.$(tag)'
        publishLocation: 'pipeline'
  - job: Build_Linux_Images
    displayName: "Build Linux Images"
    dependsOn: Build_Dacpacs
    pool:
      name: docker-linux-agents
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.x'
    - template: version.yml
    - task: DownloadPipelineArtifact@2
      displayName: "Download Dacpac Artifacts"
      inputs:
        buildType: 'current'
        artifactName: 'dacpac.$(tag)'
        targetPath: '$(Build.SourcesDirectory)/docker/images/demo-sqldev/data'
    - task: PowerShell@2
      displayName: "Prepare .env file"
      inputs:
        targetType: 'inline'
        script: './init-ci.ps1 -DemoTeamRegistry $(REGISTRY)'
        pwsh: true
      
    - task: DockerCompose@0
      displayName: "Docker Compose Build"
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: '$(azure.subscription)'
        azureContainerRegistry: '$(container.registry)'
        dockerComposeFile: 'docker/docker-compose-linux.yml'
        dockerComposeFileArgs: |
          DEMO_VERSION=$(tag)
          REGISTRY=$(REGISTRY)
          SITECORE_VERSION=$(SITECORE_VERSION)
          SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
          SITECORE_LICENSE=$(SITECORE_LICENSE)
          TELERIK_ENCRYPTION_KEY=$(TELERIK_ENCRYPTION_KEY)
          INTERNAL_NUGET_SOURCE=$(INTERNAL_NUGET_SOURCE)
          SYSTEM_ACCESSTOKEN=$(INTERNAL_NUGET_TOKEN)
          OPENCALAIS_ACCESSTOKEN=$(OpenCalais.AccessToken)
          HOSTNAME_SUFFIX=
        qualifyImageNames: false
        action: 'Build services'
        additionalImageTags: '$(SITECORE_VERSION)-linux-$(additionalImageTags)'
        arguments: '$(no.cache)'
        currentWorkingDirectory: '$(Build.SourcesDirectory)'
    - task: DockerCompose@0
      displayName: "Push Images"
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: $(azure.subscription)
        azureContainerRegistry: $(container.registry)
        dockerComposeFile: 'docker/docker-compose-linux.yml'
        dockerComposeFileArgs: |
          REGISTRY=$(REGISTRY)
          DEMO_VERSION=$(tag)
          SITECORE_VERSION=$(SITECORE_VERSION)
          SQL_SA_PASSWORD=$(SQL_SA_PASSWORD}
          SITECORE_LICENSE=$(SITECORE_LICENSE)
          TELERIK_ENCRYPTION_KEY=$(TELERIK_ENCRYPTION_KEY)
          HOSTNAME_SUFFIX=
        action: 'Push services'
        additionalImageTags: '$(SITECORE_VERSION)-linux-$(additionalImageTags)'
        currentWorkingDirectory: '$(Build.SourcesDirectory)'
