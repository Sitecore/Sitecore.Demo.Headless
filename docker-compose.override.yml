version: "3.7"

services:
  traefik:
    volumes:
      - ./data/traefik:C:/etc/traefik
    depends_on:
      cd:
        condition: service_healthy
    networks:
      - demo

  mssql:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    image: ${REGISTRY}demo/lighthouse-headless-mssql:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    build:
      context: .
      dockerfile: .\docker\images\demo-sqldev\dockerfile
      args:
        BUILD_IMAGE: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-${WINDOWSSERVERCORE_VERSION}
        BASE_IMAGE: ${REGISTRY}demo/lighthouse-mssql:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${LIGHTHOUSE_VERSION}
    environment:
      USER_PASSWORD: ${SITECORE_ADMIN_PASSWORD}
      ADMIN_USER_NAME: "sitecore\\superuser"
      DISABLE_DEFAULT_ADMIN: "FALSE"
      EXM_BASE_URL: "https://${CD_HOST}"
      START_OVERRIDE_SCRIPTS: "start-override-platform-windows.ps1"
      COVEO_ADMIN_USER_NAME: ${COVEO_ADMIN_USER_NAME}
    mem_limit: 2GB
    volumes:
      - type: bind
        source: .\data\mssql-data
        target: c:\data
    networks:
      - demo

  solr:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    volumes:
      - type: bind
        source: .\data\solr-data
        target: c:\data
    networks:
      - demo

  solr-init:
    image: ${REGISTRY}demo/base/lighthouse-xp0-modules-base-solr-init:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${BASE_MODULE_VERSION}
    networks:
      - demo

  id:
    image: ${REGISTRY}demo/lighthouse-headless-id:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    build:
      context: .
      dockerfile: .\docker\images\demo-id\dockerfile
      args:
        BASE_IMAGE: ${REGISTRY}demo/lighthouse-id:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${LIGHTHOUSE_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      Sitecore_Sitecore__IdentityServer__Clients__DefaultClient__AllowedCorsOrigins__AllowedCorsOriginsGroup2: https://${SH_HOST}|http://${SH_HOST}
    networks:
      - demo

  cm:
    image: ${REGISTRY}demo/lighthouse-xp0-headless-cm:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    entrypoint: powershell.exe -Command "& C:\\tools\\entrypoints\\iis\\JssDevelopmentEntrypoint.ps1 -WatchDirectoryParameters @{ Path = 'C:\\src'; Destination = 'C:\\inetpub\\wwwroot'; ExcludeFiles = @('C:\\src\\Web.config'); }"
    build:
      context: .
      dockerfile: .\docker\images\demo-standalone\dockerfile
      args:
        BUILD_IMAGE: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-${WINDOWSSERVERCORE_VERSION}
        BASE_IMAGE: ${REGISTRY}demo/lighthouse-xp0-cm:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${LIGHTHOUSE_VERSION}
    mem_limit: 4G
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      SITECORE_APPSETTINGS_SXAXM:DEFINE: sxaxconnect
      SITECORE_APPSETTINGS_ENV:DEFINE: Docker
      SITECORE_APPSETTINGS_UNICORN:DEFINE: Enabled
      SITECORE_APPSETTINGS_PUBLISHINGSERVICE:DEFINE: Enabled
      SOLR_CORE_PREFIX_NAME: sitecore
      SITECORE_APPSETTINGS_INTEGRATIONS:DEFINE: None
      SITECORE_APPSETTINGS_CONTENTHUB:DEFINE: Enabled
      SITECORE_CONNECTIONSTRINGS_CMP.ContentHub: ${CMP_CONTENTHUB}
      SITECORE_CONNECTIONSTRINGS_CMP.ServiceBusEntityPathIn: ${CMP_SERVICEBUSENTITYPATHIN}
      SITECORE_CONNECTIONSTRINGS_CMP.ServiceBusSubscription: ${CMP_SERVICEBUSSUBSCRIPTION}
      SITECORE_CONNECTIONSTRINGS_CMP.ServiceBusEntityPathOut: ${CMP_SERVICEBUSENTITYPATHOUT}
      SITECORE_CONNECTIONSTRINGS_DAM.ContentHub: ${DAM_URL}
      SITECORE_CONNECTIONSTRINGS_DAM.SearchPage: ${DAM_URL}/en-us/sitecore-dam-connect/approved-assets
      SITECORE_CONNECTIONSTRINGS_SFMC: ${SFMC_CONNECTIONSTRING}
      SITECORE_CONNECTIONSTRINGS_SFDC: ${SFDC_CONNECTIONSTRING}
      SITECORE_CONNECTIONSTRINGS_Sitecore.Services.Token.SecurityKey: key=${SITECORE_SERVICES_TOKEN_SECURITYKEY}
      EXM_RENDERER_URL: http://cm
      Sitecore_Horizon_ClientHost: https://${SH_HOST}
      HOST_CD: http://cd
      Sitecore_Publishing_Service_Url: http://ps:5000/
      COVEO_SERVER_URL: ${COVEO_SERVER_URL}
      DEPENDENCY_INJECTION_IGNORED_ASSEMBLIES: ${DEPENDENCY_INJECTION_IGNORED_ASSEMBLIES}
      SitecoreAITenantID: ${SITECORE_AI_TENANT_ID}
      SitecoreAIConfigServiceURL: ${SITECORE_AI_CONFIG_SERVICE_URL}
      SitecoreAIConfigServiceJWT: ${SITECORE_AI_CONFIG_SERVICE_JWT}
      PROXY_API_HOST: https://${CM_HOST}
      REACT_APP_FIREBASE_MESSAGING_PUSH_KEY: ${REACT_APP_FIREBASE_MESSAGING_PUSH_KEY}
      REACT_APP_FIREBASE_SENDER_ID: ${REACT_APP_FIREBASE_SENDER_ID}
      REACT_APP_FIREBASE_PROJECT_ID: ${REACT_APP_FIREBASE_PROJECT_ID}
      REACT_APP_FIREBASE_API_KEY: ${REACT_APP_FIREBASE_API_KEY}
      REACT_APP_FIREBASE_APP_ID: ${REACT_APP_FIREBASE_APP_ID}
      REACT_APP_GOOGLE_API_KEY: ${REACT_APP_GOOGLE_API_KEY}
      OC_BUYER_CLIENT_ID: ${OC_BUYER_CLIENT_ID}
      OC_BASE_API_URL: ${OC_BASE_API_URL}
      BOXEVER_PROXY_URL: https://${BOXEVER_PROXY_URL}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
      - C:\projects\Sitecore.Demo.Platform\items:c:\items # Platform items
      - .\data\cm\src:C:\src
      - .\data\cm\backup:c:\backup
      - .\fitness\server\src:C:\projects\Sitecore.Demo.Headless\fitness\server\src # Headless items
      - .\data\cm\logs:C:\inetpub\wwwroot\App_Data\logs
    depends_on:
      ps:
        condition: service_healthy
      id:
        condition: service_healthy
      xconnect:
        condition: service_healthy
    networks:
      demo:
        aliases:
          - "${CM_HOST}"

  xconnect:
    image: ${REGISTRY}demo/lighthouse-xp0-headless-xconnect:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    # TODO: Do we need a specific xConnect entrypoint like in 9.3?
    entrypoint: powershell.exe -Command "& C:\\tools\\entrypoints\\iis\\Development.ps1 -WatchDirectoryParameters @{ Path = 'C:\\src'; Destination = 'C:\\inetpub\\wwwroot'; ExcludeFiles = @('Web.config'); }"
    build:
      context: .
      dockerfile: .\docker\images\demo-xconnect\dockerfile
      args:
        BUILD_IMAGE: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-${WINDOWSSERVERCORE_VERSION}
        BASE_IMAGE: ${REGISTRY}demo/lighthouse-xp0-xconnect:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${LIGHTHOUSE_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
      - .\data\xconnect\src:C:\src
      - .\data\xconnect\logs:C:\inetpub\wwwroot\App_Data\logs
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\
    depends_on:
      mssql:
        condition: service_healthy
      solr:
        condition: service_healthy
    networks:
      - demo

  xdbsearchworker:
    image: ${REGISTRY}demo/lighthouse-xp0-headless-xdbsearchworker:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    entrypoint: powershell.exe -Command "& C:\\tools\\entrypoints\\worker\\Development.ps1 -WatchDirectoryParameters @{ Path = 'C:\\src'; Destination = 'C:\\service'; }"
    build:
      context: .
      dockerfile: .\docker\images\demo-xdbsearchworker\dockerfile
      args:
        BASE_IMAGE: ${REGISTRY}demo/lighthouse-xp0-xdbsearchworker:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${LIGHTHOUSE_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
      - .\data\indexworker\src:C:\src
      - .\data\indexworker\logs:C:\service\App_Data\Logs
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\
    networks:
      - demo

  xdbautomationworker:
    image: ${REGISTRY}demo/lighthouse-xp0-headless-xdbautomationworker:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    entrypoint: powershell.exe -Command "& C:\\tools\\entrypoints\\worker\\Development.ps1 -WatchDirectoryParameters @{ Path = 'C:\\src'; Destination = 'C:\\service'; }"
    build:
      context: .
      dockerfile: .\docker\images\demo-xdbautomationworker\dockerfile
      args:
        BUILD_IMAGE: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-${WINDOWSSERVERCORE_VERSION}
        BASE_IMAGE: ${REGISTRY}demo/lighthouse-xp0-xdbautomationworker:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${LIGHTHOUSE_VERSION}
        ASSETS_IMAGE: ${REGISTRY}community/modules/custom-sitecore-docker-tools-assets:${SITECORE_VERSION}-${NANOSERVER_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
      - .\data\xdbautomationworker\src:C:\src
      - .\data\xdbautomationworker:C:\service\App_Data\Logs
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\
      REACT_APP_FIREBASE_MESSAGING_SERVER_KEY: ${REACT_APP_FIREBASE_MESSAGING_SERVER_KEY}
      REACT_APP_PUBLIC_HOST_NAME: //${APP_HOST}
    networks:
      - demo

  ps:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/healthz/live"]
      timeout: 300s
    image: ${REGISTRY}demo/lighthouse-headless-ps:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    isolation: ${TRAEFIK_ISOLATION}
    build:
      context: .
      dockerfile: .\docker\images\demo-ps\dockerfile
      args:
        BASE_IMAGE: ${REGISTRY}demo/lighthouse-ps:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${LIGHTHOUSE_VERSION}
    restart: unless-stopped
    environment:
      ASPNETCORE_URLS: "http://*:5000"
      SITECORE_Sitecore:Publishing:ConnectionStrings:Core: Data Source=mssql;Initial Catalog=Sitecore.Core;User ID=sa;Password=${SQL_SA_PASSWORD};MultipleActiveResultSets=True
      SITECORE_Sitecore:Publishing:ConnectionStrings:Master: Data Source=mssql;Initial Catalog=Sitecore.Master;User ID=sa;Password=${SQL_SA_PASSWORD};MultipleActiveResultSets=True
      SITECORE_Sitecore:Publishing:ConnectionStrings:Web: Data Source=mssql;Initial Catalog=Sitecore.Web;User ID=sa;Password=${SQL_SA_PASSWORD};MultipleActiveResultSets=True
    depends_on:
      - mssql
      - ps-init
    ports:
      - "44015:5000"
    networks:
      - demo

  ps-init:
    image: ${REGISTRY}demo/lighthouse-headless-ps:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    isolation: ${TRAEFIK_ISOLATION}
    environment:
      ASPNETCORE_URLS: "http://*:5000"
      SITECORE_Sitecore:Publishing:ConnectionStrings:Core: Data Source=mssql;Initial Catalog=Sitecore.Core;User ID=sa;Password=${SQL_SA_PASSWORD};MultipleActiveResultSets=True
      SITECORE_Sitecore:Publishing:ConnectionStrings:Master: Data Source=mssql;Initial Catalog=Sitecore.Master;User ID=sa;Password=${SQL_SA_PASSWORD};MultipleActiveResultSets=True
      SITECORE_Sitecore:Publishing:ConnectionStrings:Web: Data Source=mssql;Initial Catalog=Sitecore.Web;User ID=sa;Password=${SQL_SA_PASSWORD};MultipleActiveResultSets=True
    command: schema upgrade --force
    depends_on:
      mssql:
        condition: service_healthy
    networks:
      - demo

  cd:
    isolation: ${ISOLATION}
    image: ${REGISTRY}demo/lighthouse-xp0-headless-cd:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    entrypoint: powershell.exe -Command "& C:\\tools\\entrypoints\\iis\\Development.ps1 -WatchDirectoryParameters @{ Path = 'C:\\src'; Destination = 'C:\\inetpub\\wwwroot'; ExcludeFiles = @('Web.config'); }"
    build:
      context: .
      dockerfile: .\docker\images\demo-cd\dockerfile
      args:
        BUILD_IMAGE: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-${WINDOWSSERVERCORE_VERSION}
        BASE_IMAGE: ${REGISTRY}demo/lighthouse-xp0-cd:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${LIGHTHOUSE_VERSION}
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      SITECORE_APPSETTINGS_SXAXM:DEFINE: sxaxconnect
      SITECORE_APPSETTINGS_ENV:DEFINE: Docker
      SITECORE_APPSETTINGS_UNICORN:DEFINE: Disabled
      SITECORE_APPSETTINGS_PUBLISHINGSERVICE:DEFINE: Disabled
      SOLR_CORE_PREFIX_NAME: sitecore
      SITECORE_APPSETTINGS_INTEGRATIONS:DEFINE: None
      Sitecore_ConnectionStrings_Security: Data Source=mssql;Initial Catalog=Sitecore.Core;User ID=sa;Password=${SQL_SA_PASSWORD}
      Sitecore_ConnectionStrings_Web: Data Source=mssql;Initial Catalog=Sitecore.Web;User ID=sa;Password=${SQL_SA_PASSWORD}
      Sitecore_ConnectionStrings_Messaging: Data Source=mssql;Initial Catalog=Sitecore.Messaging;User ID=sa;Password=${SQL_SA_PASSWORD}
      Sitecore_ConnectionStrings_ExperienceForms: Data Source=mssql;Initial Catalog=Sitecore.ExperienceForms;User ID=sa;Password=${SQL_SA_PASSWORD}
      Sitecore_ConnectionStrings_Exm.Master: Data Source=mssql;Initial Catalog=Sitecore.Exm.master;User ID=sa;Password=${SQL_SA_PASSWORD}
      Sitecore_ConnectionStrings_Solr.Search: http://solr:8983/solr
      Sitecore_ConnectionStrings_XConnect.Collection: http://xconnect
      Sitecore_ConnectionStrings_Xdb.MarketingAutomation.Operations.Client: http://xconnect
      Sitecore_ConnectionStrings_Xdb.MarketingAutomation.Reporting.Client: http://xconnect
      Sitecore_ConnectionStrings_Xdb.ReferenceData.Client: http://xconnect
      Sitecore_ConnectionStrings_Sitecore.Services.Token.SecurityKey: key=${SITECORE_SERVICES_TOKEN_SECURITYKEY}
      SitecoreAITenantID: ${SITECORE_AI_TENANT_ID}
      SitecoreAIConfigServiceURL: ${SITECORE_AI_CONFIG_SERVICE_URL}
      SitecoreAIConfigServiceJWT: ${SITECORE_AI_CONFIG_SERVICE_JWT}
      EXM_RENDERER_URL: http://cm
      COVEO_SERVER_URL: ${COVEO_SERVER_URL}
      DEPENDENCY_INJECTION_IGNORED_ASSEMBLIES: ${DEPENDENCY_INJECTION_IGNORED_ASSEMBLIES}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
      - .\data\cd\src:C:\src
      - .\data\cd\backup:c:\backup
      - .\data\cd\logs:C:\inetpub\wwwroot\App_Data\logs
    depends_on:
      mssql:
        condition: service_healthy
      ps:
        condition: service_healthy
      solr:
        condition: service_healthy
      xconnect:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.force-STS-Header.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.force-STS-Header.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.app-cd-header.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.app-cd-header.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.app-cd-header.headers.accessControlAllowMethods=GET,POST,OPTIONS"
      - "traefik.http.middlewares.app-cd-header.headers.accessControlAllowOriginList=https://${APP_HOST},http://localhost:3000"
      - "traefik.http.middlewares.app-cd-header.headers.accessControlAllowCredentials=true"
      - "traefik.http.middlewares.app-cd-header.headers.accessControlAllowHeaders=content-type"
      - "traefik.http.middlewares.kiosk-cd-header.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.kiosk-cd-header.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.kiosk-cd-header.headers.accessControlAllowMethods=GET,POST,OPTIONS"
      - "traefik.http.middlewares.kiosk-cd-header.headers.accessControlAllowOriginList=https://${KIOSK_HOST},http://localhost:3000"
      - "traefik.http.middlewares.kiosk-cd-header.headers.accessControlAllowCredentials=true"
      - "traefik.http.middlewares.kiosk-cd-header.headers.accessControlAllowHeaders=content-type"
      - "traefik.http.routers.cd-secure.entrypoints=websecure"
      - "traefik.http.routers.cd-secure.rule=Host(`${CD_HOST}`)"
      - "traefik.http.routers.cd-secure.tls=true"
      - "traefik.http.routers.cd-secure.middlewares=force-STS-Header"
      - "traefik.http.routers.app-cd-secure.entrypoints=websecure"
      - "traefik.http.routers.app-cd-secure.rule=Host(`${APP_CD_HOST}`)"
      - "traefik.http.routers.app-cd-secure.tls=true"
      - "traefik.http.routers.app-cd-secure.middlewares=app-cd-header"
      - "traefik.http.routers.kiosk-cd-secure.entrypoints=websecure"
      - "traefik.http.routers.kiosk-cd-secure.rule=Host(`${KIOSK_CD_HOST}`)"
      - "traefik.http.routers.kiosk-cd-secure.tls=true"
      - "traefik.http.routers.kiosk-cd-secure.middlewares=kiosk-cd-header"
    networks:
      demo:
        aliases:
          - "${CD_HOST}"
          - app-cd
          - "${APP_CD_HOST}"
          - kiosk-cd
          - "${KIOSK_CD_HOST}"

  app:
    image: ${REGISTRY}demo/lighthouse-headless-app:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    isolation: ${ISOLATION}
    build:
      context: .
      dockerfile: .\docker\images\demo-app\dockerfile
      args:
        BUILD_IMAGE: jflsitecore/nodejs-win:10.19.0-${NANOSERVER_VERSION}
        BASE_IMAGE: mcr.microsoft.com/powershell:nanoserver-${NANOSERVER_VERSION}
    ports:
      - "44040:80"
    environment:
      SITECORE_API_HOST: http://${APP_CD_HOST}
      PROXY_API_HOST: https://${APP_HOST}
      REACT_APP_FIREBASE_MESSAGING_PUSH_KEY: ${REACT_APP_FIREBASE_MESSAGING_PUSH_KEY}
      REACT_APP_FIREBASE_SENDER_ID: ${REACT_APP_FIREBASE_SENDER_ID}
      REACT_APP_FIREBASE_PROJECT_ID: ${REACT_APP_FIREBASE_PROJECT_ID}
      REACT_APP_FIREBASE_API_KEY: ${REACT_APP_FIREBASE_API_KEY}
      REACT_APP_FIREBASE_APP_ID: ${REACT_APP_FIREBASE_APP_ID}
      REACT_APP_GOOGLE_API_KEY: ${REACT_APP_GOOGLE_API_KEY}
      OC_BUYER_CLIENT_ID: ${OC_BUYER_CLIENT_ID}
      OC_BASE_API_URL: ${OC_BASE_API_URL}
      BOXEVER_PROXY_URL: https://${BOXEVER_PROXY_URL}
    depends_on:
      cm:
        condition: service_healthy
      cd:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app-secure.entrypoints=websecure"
      - "traefik.http.routers.app-secure.rule=Host(`${APP_HOST}`)"
      - "traefik.http.routers.app-secure.tls=true"
    networks:
      demo:
        aliases:
          - ${APP_HOST}

  kiosk:
    image: ${REGISTRY}demo/lighthouse-headless-kiosk:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    isolation: ${ISOLATION}
    build:
      context: .
      dockerfile: .\docker\images\demo-kiosk\dockerfile
      args:
        BUILD_IMAGE: jflsitecore/nodejs-win:10.19.0-${NANOSERVER_VERSION}
        BASE_IMAGE: mcr.microsoft.com/powershell:nanoserver-${NANOSERVER_VERSION}
    ports:
      - "44041:80"
    environment:
      SITECORE_API_HOST: http://${KIOSK_CD_HOST}
      PROXY_API_HOST: https://${KIOSK_HOST}
      REACT_APP_GOOGLE_API_KEY: ${REACT_APP_GOOGLE_API_KEY}
      BOXEVER_PROXY_URL: https://${BOXEVER_PROXY_URL}
    depends_on:
      cm:
        condition: service_healthy
      cd:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kiosk-secure.entrypoints=websecure"
      - "traefik.http.routers.kiosk-secure.rule=Host(`${KIOSK_HOST}`)"
      - "traefik.http.routers.kiosk-secure.tls=true"
    networks:
      demo:
        aliases:
          - .${KIOSK_HOST}

  smtp:
    image: maildev/maildev
    command: ["--smtp", "25", "--web", "80"]
    isolation: ${ISOLATION}
    ports:
      - "44025:25"
      - "44026:80"
    networks:
      - demo
    scale: ${SMTP_CONTAINERS_COUNT}

  init:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    image: ${REGISTRY}demo/lighthouse-headless-init:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    isolation: ${ISOLATION}
    build:
      context: .\docker\images\demo-init
      args:
        BASE_IMAGE: ${REGISTRY}demo/lighthouse-init:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${LIGHTHOUSE_VERSION}
    environment:
      ADMIN_PASSWORD: ${SITECORE_ADMIN_PASSWORD}
      ADMIN_USER_NAME: "superuser"
      HOST_CD: "http://cd"
      HOST_CM: "http://cm"
      HOST_PS: "http://ps:5000"
      HOST_ID: "http://id"
      MARKETING_DEFINITIONS_APIKEY: ${MARKETING_DEFINITIONS_APIKEY}
      SKIP_WARMUP_CD: ${SKIP_WARMUP_CD}
      DAM_URL: ${DAM_URL}
      INIT_CONTEXT: Data Source=mssql;Initial Catalog=platform_init_ready;User ID=sa;Password=${SQL_SA_PASSWORD}
      COVEO_ORGANIZATION_ID: ${COVEO_ORGANIZATION_ID}
      COVEO_REGION: ${COVEO_REGION}
      COVEO_API_KEY: ${COVEO_API_KEY}
      COVEO_SEARCH_API_KEY: ${COVEO_SEARCH_API_KEY}
      COVEO_FARM_NAME: ${COVEO_FARM_NAME}
      COVEO_ADMIN_USER_NAME: ${COVEO_ADMIN_USER_NAME}
    depends_on:
      mssql:
        condition: service_healthy
      ps:
        condition: service_healthy
      cm:
        condition: service_healthy
    networks:
      - demo

  authoringhost:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/healthz/live"]
    image: ${REGISTRY}demo/lighthouse-headless-authoringhost:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    isolation: ${ISOLATION}
    build:
      context: docker\images\demo-authoringhost
      args:
        BASE_IMAGE: ${REGISTRY}demo/lighthouse-authoringhost:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${LIGHTHOUSE_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      Sitecore_FederatedUI__HostBaseUrl: http://authoringhost
      Sitecore_SitecorePlatform__ContentManagementUrl: https://${CM_HOST}
      Sitecore_SitecorePlatform__ContentManagementInternalUrl: http://cm
      Sitecore_Sitecore__Authentication__OpenIdConnectOptions__RequireHttpsMetadata: "false"
      Sitecore_Sitecore__Authentication__OpenIdConnectOptions__Authority: https://${ID_HOST}
      Sitecore_Sitecore__Authentication__OpenIdConnectOptions__CallbackAuthority: https://${SH_HOST}
      Sitecore_Sitecore__Authentication__OpenIdConnectOptions__InternalAuthority: http://id
      Sitecore_Sitecore__Authentication__BearerAuthenticationOptions__Authority: https://${ID_HOST}
      Sitecore_Sitecore__Authentication__BearerAuthenticationOptions__InternalAuthority: http://id
      Sitecore_Sitecore__Authentication__BearerAuthenticationOptions__RequireHttpsMetadata: "false"
      Sitecore_Plugins__Filters__ExperienceAccelerator: +SXA
      Sitecore_Plugins__Filters__ContentHub: +ContentHub
      Sitecore_Sitecore__Logging__Serilog__MinimumLevel__Default: Debug
    depends_on:
      id:
        condition: service_healthy
      cm:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.force-STS-Header.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.force-STS-Header.headers.stsSeconds=31536000"
      - "traefik.http.routers.sh-secure.entrypoints=websecure"
      - "traefik.http.routers.sh-secure.rule=Host(`${SH_HOST}`)"
      - "traefik.http.routers.sh-secure.tls=true"
      - "traefik.http.routers.sh-secure.middlewares=force-STS-Header"
      - "traefik.http.services.sh.loadbalancer.server.port=80"
    networks:
      demo:
        aliases:
          - ${SH_HOST}

  boxever:
    image: ${REGISTRY}demo/lighthouse-boxever-proxy:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    build:
      context: docker/images/demo-boxever
    environment:
      ASPNETCORE_URLS: "http://*:5000"
      BOXEVER_APIURL: ${BOXEVER_APIURL}
      BOXEVER_CLIENTKEY: ${BOXEVER_CLIENTKEY}
      BOXEVER_APITOKEN: ${BOXEVER_APITOKEN}
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.force-STS-Header.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.force-STS-Header.headers.stsSeconds=31536000"
      - "traefik.http.routers.boxever-secure.entrypoints=websecure"
      - "traefik.http.routers.boxever-secure.rule=Host(`${BOXEVER_PROXY_URL}`)"
      - "traefik.http.routers.boxever-secure.tls=true"
      - "traefik.http.routers.boxever-secure.middlewares=force-STS-Header"
      - "traefik.http.services.boxever.loadbalancer.server.port=5000"
    networks:
      demo:
        aliases:
          - ${BOXEVER_PROXY_URL}

networks:
  demo:
    external:
      name: nat
