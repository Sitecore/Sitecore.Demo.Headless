<!--
  JSS Sitecore Configuration Patch File

  This configuration file registers the JSS site with Sitecore, and configures the Layout Service
  to work with it. Config patches need to be deployed to the Sitecore server.

  Normally `jss deploy config` can do this for local development. To manually deploy, or to deploy via CI,
  this file can be placed in the `App_Config/Include` folder, or a subfolder of it, within the Sitecore site.
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:set="http://www.sitecore.net/xmlconfig/set/" xmlns:role="http://www.sitecore.net/xmlconfig/role/">
  <sitecore>
    <settings>
      <!--
        DEV/TEST ONLY: Disable Sitecore robot detection.
        These settings make it easy to test Sitecore analytics locally,
        by turning off its robot filters. Remove these lines in production.
      -->
      <setting name="Analytics.AutoDetectBots" set:value="false" />
      <setting name="Analytics.Robots.IgnoreRobots" set:value="false" />

      <!--
        Making sure that absolute media urls are generated
      -->
      <setting name="Media.AlwaysIncludeServerUrl" set:value="true" />

      <!--
        PROXY CONFIGURATION
        When running JSS with the headless proxy (node-express-ssr),
        the original IP address of clients is obscured by the proxy.
        This setting tells Sitecore to read the forwarded header the proxy sends,
        thus making analytics track the correct original client IP address.
      -->
      <setting name="Analytics.ForwardedRequestHttpHeader" set:value="X-Forwarded-For" />

      <!-- Enabling fancy JSS tracker API -->
      <setting name="Sitecore.JSS.TrackerServiceEnabled" value="true" />
    </settings>
    <sites>
      <!--
        JSS Site Registration
        This configures the site with Sitecore - i.e. host headers, item paths.
        If your JSS app lives within an existing Sitecore site, this may not be necessary.

        IMPORTANT: JSS sites ship in 'live mode', which makes development and testing easy,
        but disables workflow and publishing. Before going to production, change the `database`
        below to `web` instead of `master`.
      -->
      <site patch:before="site[@name='website']"
            inherits="website"
            name="habitatfitness-kiosk"
            rootPath="/sitecore/content/habitatfitness-kiosk"
            startItem="/home"      
            hostName="habitatfitness-kiosk.dev.local"
            database="master" />
    </sites>
    <javaScriptServices>
      <apps>
        <!--
          JSS App Registration
          The JSS app needs to be registered in order to support layout service and import services.

          There are many available attributes, and they inherit the defaults if not explicitly specified here.
          Defaults are defined in `/App_Config/Sitecore/JavaScriptServices/Sitecore.JavaScriptServices.Apps.config`

        -->
        <app name="habitatfitness-kiosk"
             sitecorePath="/sitecore/content/habitatfitness-kiosk"
             useLanguageSpecificLayout="true"
             routeDatasourcesPath="Data"
             inherits="defaults"
        />
      </apps>
      <!--
        IMAGE RESIZING WHITELIST
        Using Sitecore server-side media resizing (i.e. the `imageParams` or `srcSet` props on the `<Image/>` helper component)
        could expose your Sitecore server to a denial-of-service attack by rescaling an image with many arbitrary dimensions.
        In JSS resizing param sets that are unknown are rejected by a whitelist.

        Sets of image sizing parameters that are used in app components must be whitelisted here.
        If a param set is not whitelisted, the image will be returned _without resizing_.

        To determine the image parameters being used, look at the query string on the `src` of the rendered image, i.e. '/img.jpg?mw=100&h=72' -> mw=100,h=72
        Note: the parameter sets defined here are comma-delimited (,) instead of &-delimited like the query string. Multiple sets are endline-delimited.
       -->
      <allowedMediaParams>
        <!-- XML element name is arbitary, useful for organizing and patching -->
        <event-image>
          mw=650
          mw=350
        </event-image>
      </allowedMediaParams>
      <renderEngines>
        <renderEngine name="nodejs">
          <instance id="defaults">
            <EnvironmentVariables>
              <!-- 
                HABITAT FITNESS: set the following settings as per the README.MD
              -->
              <!--
              <var name="REACT_APP_GOOGLE_API_KEY" value="<insert-yours-here>" />
              <var name="REACT_APP_FIREBASE_MESSAGING_PUSH_KEY" value="<insert-yours-here>" />
              <var name="REACT_APP_FIREBASE_SENDER_ID" value="<insert-yours-here>" />
              -->
            </EnvironmentVariables>
          </instance>
        </renderEngine>
      </renderEngines>
    </javaScriptServices>
  </sitecore>
</configuration>
